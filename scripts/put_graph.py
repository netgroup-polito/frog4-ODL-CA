import os
os.environ.setdefault("FROG4_SDN_DO_CONF", "config/script-config.ini")
import logging
import json

from do_core.config import Configuration
from do_core.user_authentication import UserAuthentication
from do_core.do import DO

from nffg_library.validator import ValidateNF_FG
from nffg_library.nffg import NF_FG

Configuration().log_configuration()

try:

    user_data = UserAuthentication().authenticateUserFromCredentials('admin', 'qwerty', 'admin_tenant')
    nffg_id = '123'

    request_body = '{"forwarding-graph":{"name":"Demo Graph 1","big-switch":{"flow-rules":[{"match":{"port_in":"endpoint:autogenerated_split_12"},"id":"11_2","actions":[{"output_to_port":"endpoint:00000001"}],"priority":10},{"match":{"port_in":"endpoint:00000001"},"id":"12_1","actions":[{"output_to_port":"endpoint:autogenerated_split_12"}],"priority":10}]},"id":"13","end-points":[{"type":"vlan","id":"00000001","vlan":{"vlan-id":"294","node-id":"of:000064e9505a82c0","if-name":"5100"}},{"type":"vlan","id":"autogenerated_split_12","vlan":{"vlan-id":"295","node-id":"of:000084802d9d0540","if-name":"5101"}}]}}'
    nffg_dict = json.loads(request_body, 'utf-8')

    ValidateNF_FG().validate(nffg_dict)
    nffg = NF_FG()
    nffg.parseDict(nffg_dict)
    nffg.id = nffg_id

    nc_do = DO(user_data)
    nc_do.NFFG_Validate(nffg)
    nc_do.NFFG_Put(nffg)
except Exception as err:
    logging.exception(err)
