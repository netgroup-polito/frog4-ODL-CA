import json

from do_core.config import Configuration
from do_core.user_authentication import UserAuthentication
from do_core.do import DO

from nffg_library.validator import ValidateNF_FG
from nffg_library.nffg import NF_FG


Configuration().log_configuration()

try:
    user_data = UserAuthentication().authenticateUserFromCredentials('admin', 'admin', 'admin_tenant')
    nffg_id = '123'

    request_body = '{"forwarding-graph":{"name":"Authentication-Graph","big-switch":{"flow-rules":[{"match":{"port_in":"endpoint:autogenerated_split_00000010"},"actions":[{"output_to_port":"endpoint:00000003"}],"priority":1,"id":"00000009_2"},{"match":{"port_in":"endpoint:00000003"},"actions":[{"output_to_port":"endpoint:autogenerated_split_00000010"}],"priority":1,"id":"00000010_1"}]},"id":"2","end-points":[{"interface":{"if-name":"s2-eth1","node-id":"of:0000000000000002"},"name":"REMOTE_INGRESS","type":"interface","id":"00000003"},{"gre-tunnel":{"local-ip":"10.0.0.2","remote-ip":"10.0.0.4","gre-key":"f85c4be84508ecabf6add79c5bf69c15"},"type":"gre-tunnel","id":"autogenerated_split_00000010"}]}}'
    nffg_dict = json.loads(request_body, 'utf-8')

    ValidateNF_FG().validate(nffg_dict)
    nffg = NF_FG()
    nffg.parseDict(nffg_dict)
    nffg.id = nffg_id

    nc_do = DO(user_data)
    nc_do.NFFG_Validate(nffg)
    nc_do.NFFG_Put(nffg)

except Exception as err:
    logging.exception(err)
